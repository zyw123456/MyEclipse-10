package com.sinoway.common.service.parse;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.sinoway.common.parse.GeneralJsonMsgParser;
import com.sinoway.common.util.DocumentUtil;
import com.sinoway.mcp.exception.JsonMsgParseException;
import com.sinoway.mcp.exception.TradeMsgTransfException;

/**
 * 通用json报文转换器(json转化为xml)
 * 
 * @author zhangyanwei
 * @version 1.0 2016-01-04
 */
public class TestTranXml {
	/**
	 * 通过模板对JSONObject进行转换，转换输出JsonObject
	 * 
	 * @param el
	 *            模板节点
	 * @param pJson
	 *            当前json报文
	 * @param rootJson
	 *            整体Json报文
	 * @return 转换完成的Json格式报文
	 * @throws JsonMsgParseException
	 *             TradeMsgTransfException Exception
	 */
	public Document transfJsonMsgByJTemp(Document  document ,Element el, JSONObject pJson,
			JSONObject rootJson) throws JsonMsgParseException,
			TradeMsgTransfException, Exception {
		 
		  if(document.getChildNodes().getLength() == 0){
			  el = (Element) el.cloneNode(true);
			  document.adoptNode(el);
			  document.appendChild(el);
		  }
		 
		// 获取模板中所有子节点，目前包含 key obj list
		NodeList nodes = el.getChildNodes();

		if (nodes != null && nodes.getLength() > 0) {
			for (int i = 0; i < nodes.getLength(); i++) {
				Node node = nodes.item(i);
				if (node.getNodeType() == 3) {
					continue;
				}

				Element sEl = null;
				// 获取当前节点名称
				String nName = node.getNodeName();
				// 字符节点处理
				sEl = (Element) node;
				// 获取节点key值
				String keyV = sEl.getTextContent();
				// 当前节点值获取表达式
				String from = sEl.getAttribute("FROM");
				// 是否继承父节点 0-否 1-是，默认为否
				String extend = sEl.getAttribute("EXTEND").equals("") ? "0"	: sEl.getAttribute("EXTEND");
				String value = "";
				// 判断如果没有子节点 ，没有extend
				if (extend.equals("0") && node.getChildNodes().getLength() < 1) {
					Object o = GeneralJsonMsgParser.getJsonValueByKey(pJson,from);
					if (o != null) {
						try {
							value = (String) o;

							sEl.setTextContent(value);
							
						} catch (Exception e) {
							throw new TradeMsgTransfException(
									"Json报文转换异常：字符节点值类型不匹配:key:" + nName
											+ "，from:" + from);
						}
					}
				}else {
					JSONObject fromJson = null;
					Object o = GeneralJsonMsgParser.getJsonValueByKey(pJson,from);
					if (o != null) {
						try {
							fromJson =(JSONObject)o;
						} catch (Exception e) {
							throw new TradeMsgTransfException(
									"Json报文转换异常：字符节点值类型不匹配:key:" + nName
											+ "，from:" + from);
					   }
						transfJsonMsgByJTemp(document,sEl,fromJson,rootJson);
				     }
					
					
				}
				
			}
			
		}
		
		System.out.println(":::::" + DocumentUtil.domToStrByDefDecode(document));
	
		return document;
	}
	
	public  Map getJsonTransferMap(JSONObject json) throws JsonMsgParseException,TradeMsgTransfException{
		if(json == null){
			throw new TradeMsgTransfException(
					"转化的json对象不能为空");
		}
		Set<String> keys = json.keySet();
		
		
 		Map map  =  new HashMap();
		for(String key : keys){
			Object o = key;
		  if(o instanceof String ){
			 
			  map.put(key, o);
				
			}else if(o instanceof JSONObject){
			Map  jsonmap = getJsonTransferMap((JSONObject)o);
			map.put(key, jsonmap);
				
			}else if(o instanceof JSONArray){
			JSONArray spj = (JSONArray)o;
			List list = jsonArrayListTransfer(jsa);
				
				
			}
		}
		
		
		
		
		
		
		
		return null;
		
	}


}
