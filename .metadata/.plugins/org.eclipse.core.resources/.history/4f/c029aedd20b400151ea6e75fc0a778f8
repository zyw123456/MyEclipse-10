package com.sinoway.common.service.parse;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.sinoway.common.entity.GeneralBusEntity;
import com.sinoway.common.parse.GeneralJsonMsgParser;
import com.sinoway.common.util.DocumentUtil;
import com.sinoway.common.util.StringUtil;
import com.sinoway.mcp.exception.JsonMsgParseException;
import com.sinoway.mcp.exception.TradeMsgTransfException;

/**
 * 通用json报文转换器(json转化为xml)
 * 
 * @author zhangyanwei
 * @version 1.0 2016-01-04
 */
public class TestTranXml {
	/**
	 * 通过模板对JSONObject进行转换，转换输出JsonObject
	 * 
	 * @param el
	 *            模板节点
	 * @param pJson
	 *            当前json报文
	 * @param rootJson
	 *            整体Json报文
	 * @return 转换完成的Json格式报文
	 * @throws JsonMsgParseException
	 *             TradeMsgTransfException Exception
	 */
	public Document transfJsonMsgByJTemp(Document  document ,Element el, JSONObject pJson,
			JSONObject rootJson) throws JsonMsgParseException,
			TradeMsgTransfException, Exception {
		 
		 Element newEl = null;
		  if(document.getChildNodes().getLength() == 0){
			  newEl = (Element) el.cloneNode(true);
			  document.adoptNode(newEl);
			  document.appendChild(newEl);
		  }
		 
		// 获取模板中所有子节点，目前包含 key obj list
		NodeList nodes = newEl.getChildNodes();

		if (nodes != null && nodes.getLength() > 0) {
			for (int i = 0; i < nodes.getLength(); i++) {
				Node node = nodes.item(i);
				if (node.getNodeType() == 3) {
					continue;
				}

				Element sEl = null;
				// 获取当前节点名称
				String nName = node.getNodeName();
				// 字符节点处理
				sEl = (Element) node;
				// 获取节点key值
				String keyV = sEl.getTextContent();
				// 当前节点值获取表达式
				String from = sEl.getAttribute("FROM");
				// 是否继承父节点 0-否 1-是，默认为否
				String extend = sEl.getAttribute("EXTEND").equals("") ? "0"	: sEl.getAttribute("EXTEND");
				String value = "";
				Element pelement = null;
				if(node.getChildNodes().getLength() > 1){
				  
				}
				// 判断如果没有子节点 ，没有extend
				if (extend.equals("0") && node.getChildNodes().getLength() < 1) {
					Object o = GeneralJsonMsgParser.getJsonValueByKey(pJson,from);
					if (o != null) {
						try {
							value = (String) o;

							// 生成所有的节点
							Element keylement = document.createElement(nName);
							keylement.appendChild(document.createTextNode(value));
							el.appendChild(keylement);
							
						} catch (Exception e) {
							throw new TradeMsgTransfException(
									"Json报文转换异常：字符节点值类型不匹配:key:" + nName
											+ "，from:" + from);
						}
					}
				}else {
					JSONObject fromJson = null;
					Object o = GeneralJsonMsgParser.getJsonValueByKey(pJson,from);
					//判断object 是不是json
					if(o != null){
						try{
							fromJson = (JSONObject)o;
						}catch(Exception e){
							e.printStackTrace();
							throw new TradeMsgTransfException("Json报文转换异常：obj值类型不匹配");
						}
					}
			       
					    pelement = document.createElement(nName);
//					    System.out.println(node.getChildNodes()+"取d里面的节点集合");
//					    NodeList childNodes = node.getChildNodes();
//					    for(int j = 0; j < childNodes.getLength(); j++ ){
//					   
//					    	Node childNode = childNodes.item(j);
//					    	
//					    	if (childNode.getNodeType() == 3) {
//								continue;
//							}
//					    	Element   elementNode = document.createElement(childNode.getNodeName());
//					    	String nodefrom = elementNode.getAttribute("FROM");
//					    	System.out.println(elementNode.getAttribute("FROM")+"------子节点里面的 from 属性");
//					    	Object obj = GeneralJsonMsgParser.getJsonValueByKey(fromJson,nodefrom);
//						    pelement.appendChild(elementNode);
//						    value = (String) obj;
//						 //   elementNode.appendChild(document.createTextNode(value));
//					    }
			
					root.appendChild(pelement);
					transfJsonMsgByJTemp(document,sEl,fromJson,rootJson);
				 
				}
				
			}
			createXml(document);
		}
	
		return null;
	}

	public void createXml(Document document) {

		TransformerFactory tf = TransformerFactory.newInstance();

		try {

			Transformer transformer = tf.newTransformer();

			DOMSource source = new DOMSource(document);

			transformer.setOutputProperty(OutputKeys.ENCODING, "gb2312");

			transformer.setOutputProperty(OutputKeys.INDENT, "yes");

			PrintWriter pw = new PrintWriter(new FileOutputStream(
					"D:/testxml.xml"));

			StreamResult result = new StreamResult(pw);

			transformer.transform(source, result);

			System.out.println("生成XML文件成功!");

		} catch (TransformerConfigurationException e) {

			System.out.println(e.getMessage());

		} catch (IllegalArgumentException e) {

			System.out.println(e.getMessage());

		} catch (FileNotFoundException e) {

			System.out.println(e.getMessage());

		} catch (TransformerException e) {

			System.out.println(e.getMessage());

		}
	}
}
