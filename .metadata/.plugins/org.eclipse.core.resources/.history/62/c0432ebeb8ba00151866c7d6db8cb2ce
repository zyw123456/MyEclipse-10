package com.sinoway.common.util;
 
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.IvParameterSpec;
import com.sinoway.common.exception.DesException;
import com.test.util.Base64;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/**
 * 通用加解密工具类
 * @author Liuzhen
 * @version 1.0
 *  2015-11-7
 */
public class DesUtil {
 
    private final static String DES = "DES";
    private final static String ALGORITHM_DES = "DES/CBC/PKCS5Padding";
    private final static String DF_ENCODE = "UTF-8";
    private final static String DF_V = "12345678";
    private final static BASE64Encoder encoder = new BASE64Encoder();
    private final static BASE64Decoder decoder = new BASE64Decoder();
    private static  SecretKeyFactory keyFactory = null;
    private static DesUtil desUtil = null;
     
    private DesUtil(){
    	try {
    		if(keyFactory == null)
    			keyFactory = SecretKeyFactory.getInstance(DES);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
    }
    
    public static synchronized  void init(){
    	
    	if (desUtil == null) {  
    		desUtil = new DesUtil();  
        } 

    }
    public static DesUtil getInstance(){
    	if(desUtil == null){
    		init();
    	}
    	return desUtil;
    }

    /**
     *  根据键值、向量进行加密,指定字符编码
     * @param data 要加密的数据
     * @param key  密钥
     * @param vector 向量
     * @param 字符编码
     * @return 加密完成的字符串
     * @throws DesException
     */
    public String encrypt(String data, String key,String vector,String encode) throws DesException {
    	if(data == null || "".equals(data))
    		throw new DesException("对称加密失败： 要加密的数据不能为空");
    	if(key == null || "".equals(key))
    		throw new DesException("对称加密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称加密失败： 密钥长度必须是8的倍数");
    	if(vector == null || "".equals(vector))
    		throw new DesException("对称加密失败： 向量不能为空");
    	if(encode == null || "".equals(encode))
    		throw new DesException("对称加密失败： 字符编码不能为空");
    	
    	byte[] bs;
		try {
			bs = data.getBytes(encode);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 不支持的字符编码");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称加密失败： 获取字节数组时发生未知异常");
		}
        
		byte[] bt = encrypt(bs, key.getBytes(),vector.getBytes());
        
        String strs = encoder.encode(bt);
        
        return strs;
    }
    
    /**
     *  根据键值、向量进行加密,不指定字符编码
     * @param data 要加密的数据
     * @param key  密钥
     * @param vector 向量
     * @param 字符编码
     * @return 加密完成的字符串
     * @throws DesException
     */
    public String encryptWithoutEncode(String data, String key,String vector) throws DesException {
    	if(data == null || "".equals(data))
    		throw new DesException("对称加密失败： 要加密的数据不能为空");
    	if(key == null || "".equals(key))
    		throw new DesException("对称加密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称加密失败： 密钥长度必须是8的倍数");
    	if(vector == null || "".equals(vector))
    		throw new DesException("对称加密失败： 向量不能为空");
    	
    	byte[] bs = data.getBytes();
        
		byte[] bt = encrypt(bs, key.getBytes(),vector.getBytes());
        
        String strs = encoder.encode(bt);
        
        return strs;
    }
    
    /**
     *  根据键值、向量进行加密,默认字符编码/默认向量
     * @param data 要加密的数据
     * @param key  密钥
     * @return 加密完成的字符串
     * @throws DesException
     */
    public String encryptDefEncodeV(String data, String key) throws DesException {
    	if(data == null || "".equals(data))
    		throw new DesException("对称加密失败： 要加密的数据不能为空");
    	if(key == null || "".equals(key))
    		throw new DesException("对称加密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称加密失败： 密钥长度必须是8的倍数");
    	if(DF_V == null || "".equals(DF_V))
    		throw new DesException("对称加密失败： 向量不能为空");
    	if(DF_ENCODE == null || "".equals(DF_ENCODE))
    		throw new DesException("对称加密失败： 字符编码不能为空");
    	
    	byte[] bs;
		try {
			bs = data.getBytes(DF_ENCODE);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 不支持的字符编码");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称加密失败： 获取字节数组时发生未知异常");
		}
        
		byte[] bt = encrypt(bs, key.getBytes(),DF_V.getBytes());
        
        String strs = encoder.encode(bt);
        
        return strs;
    }
    
    /**
     *  根据键值、向量进行加密,默认字符编码
     * @param data 要加密的数据
     * @param key  密钥
     * @param vector 向量
     * @return 加密完成的字符串
     * @throws DesException
     */
    public String encryptByDefEncode(String data, String key,String vector) throws DesException {
    	if(data == null || "".equals(data))
    		throw new DesException("对称加密失败： 要加密的数据不能为空");
    	if(key == null || "".equals(key))
    		throw new DesException("对称加密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称加密失败： 密钥长度必须是8的倍数");
    	if(vector == null || "".equals(vector))
    		throw new DesException("对称加密失败： 向量不能为空");
    	if(DF_ENCODE == null || "".equals(DF_ENCODE))
    		throw new DesException("对称加密失败： 字符编码不能为空");
    	
    	byte[] bs;
		try {
			bs = data.getBytes(DF_ENCODE);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 不支持的字符编码");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称加密失败： 获取字节数组时发生未知异常");
		}
        
		byte[] bt = encrypt(bs, key.getBytes(),vector.getBytes());
        
        String strs = encoder.encode(bt);
        
        return strs;
    }
    
    /**
     *  根据键值、向量进行加密,指定字符编码/默认向量
     * @param data 要加密的数据
     * @param key  密钥
     * @param 字符编码
     * @return 加密完成的字符串
     * @throws DesException
     */
    public String encrypt(String data, String key,String encode) throws DesException {
    	if(data == null || "".equals(data))
    		throw new DesException("对称加密失败： 要加密的数据不能为空");
    	if(key == null || "".equals(key))
    		throw new DesException("对称加密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称加密失败： 密钥长度必须是8的倍数");
    	if(DF_V == null || "".equals(DF_V))
    		throw new DesException("对称加密失败： 向量不能为空");
    	if(encode == null || "".equals(encode))
    		throw new DesException("对称加密失败： 字符编码不能为空");
    	
    	byte[] bs;
		try {
			bs = data.getBytes(encode);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 不支持的字符编码");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称加密失败： 获取字节数组时发生未知异常");
		}
        
		byte[] bt = encrypt(bs, key.getBytes(),DF_V.getBytes());
        
        String strs = encoder.encode(bt);
        
        return strs;
    }
    
 
    /**
     * Description 根据键值进行解密 指定向量/字符编码
     * @param data	要加密的字符串
     * @param key   加密键
     * @param vector 向量
     * @param encode 字符编码
     * @return 解密完成的字符串
     * @throws DesException
     */
    public String decrypt(String data, String key,String vector,String encode) throws DesException{
        
    	if (data == null || "".equals(data))
        	throw new DesException("对称解密失败：要解密的数据不能为空");
        if(key == null || "".equals(key))
    		throw new DesException("对称解密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称解密失败： 密钥长度必须是8的倍数");
    	if(vector == null || "".equals(vector))
    		throw new DesException("对称解密失败： 向量不能为空");
    	if(encode == null || "".equals(encode))
    		throw new DesException("对称解密失败： 字符编码不能为空");
        
    	byte[] buf;
		
    	try {
			buf = decoder.decodeBuffer(data);
			byte[] bt = decrypt(buf,key.getBytes(),vector.getBytes());
			String str = new String(bt,encode); 
			return str;
		} catch (IOException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败： I/O异常");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称解密失败： 未知异常");
		}
    }
    
    /**
     * Description 根据键值进行解密 指定向量 不指定字符编码
     * @param data	要加密的字符串
     * @param key   加密键
     * @param vector 向量
     * @return 解密完成的字符串
     * @throws DesException
     */
    public String decryptWithoutEncode(String data, String key,String vector) throws DesException{
        
    	if (data == null || "".equals(data))
        	throw new DesException("对称解密失败：要解密的数据不能为空");
        if(key == null || "".equals(key))
    		throw new DesException("对称解密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称解密失败： 密钥长度必须是8的倍数");
    	if(vector == null || "".equals(vector))
    		throw new DesException("对称解密失败： 向量不能为空");
        
    	byte[] buf;
		
    	try {  
			buf = decoder.decodeBuffer(data);
			byte[] bt = decrypt(buf,key.getBytes(),vector.getBytes());
			String str = new String(bt); 
			return str;
		} catch (IOException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败： I/O异常");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称解密失败： 未知异常");
		}
    }
    
    /**
     * Description 根据键值进行解密 指定向量/字符编码
     * @param data	要加密的字符串
     * @param key   加密键
     * @param vector 向量
     * @param encode 字符编码
     * @return 解密完成的字符串
     * @throws DesException
     */
    public String decryptDefEncodeV(String data, String key) throws DesException{
        
    	if (data == null || "".equals(data))
        	throw new DesException("对称解密失败：要解密的数据不能为空");
        if(key == null || "".equals(key))
    		throw new DesException("对称解密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称解密失败： 密钥长度必须是8的倍数");
    	if(DF_V == null || "".equals(DF_V))
    		throw new DesException("对称解密失败： 向量不能为空");
    	if(DF_ENCODE == null || "".equals(DF_ENCODE))
    		throw new DesException("对称解密失败： 字符编码不能为空");
        
    	byte[] buf;
		
    	try {
			buf = decoder.decodeBuffer(data);
			byte[] bt = decrypt(buf,key.getBytes(),DF_V.getBytes());
			String str = new String(bt,DF_ENCODE); 
			return str;
		} catch (IOException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败： I/O异常");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称解密失败： 未知异常");
		}
    }
    
    /**
     * Description 根据键值进行解密 指定字符编码  默认向量
     * @param data	要加密的字符串
     * @param key   加密键
     * @param vector 向量
     * @param encode 字符编码
     * @return 解密完成的字符串
     * @throws DesException
     */
    public String decryptDefV(String data, String key,String encode) throws DesException{
        
    	if (data == null || "".equals(data))
        	throw new DesException("对称解密失败：要解密的数据不能为空");
        if(key == null || "".equals(key))
    		throw new DesException("对称解密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称解密失败： 密钥长度必须是8的倍数");
    	if(DF_V == null || "".equals(DF_V))
    		throw new DesException("对称解密失败： 向量不能为空");
    	if(encode == null || "".equals(encode))
    		throw new DesException("对称解密失败： 字符编码不能为空");
        
    	byte[] buf;
		
    	try {
			buf = decoder.decodeBuffer(data);
			byte[] bt = decrypt(buf,key.getBytes(),DF_V.getBytes());
			String str = new String(bt,DF_ENCODE); 
			return str;
		} catch (IOException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败： I/O异常");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称解密失败： 未知异常");
		}
    }
    
    /**
     * Description 根据键值进行解密 指定向量   默认字符编码
     * @param data	要加密的字符串
     * @param key   加密键
     * @param vector 向量
     * @return 解密完成的字符串
     * @throws DesException
     */
    public String decryptDefEncode(String data, String key,String vector) throws DesException{
        
    	if (data == null || "".equals(data))
        	throw new DesException("对称解密失败：要解密的数据不能为空");
        if(key == null || "".equals(key))
    		throw new DesException("对称解密失败： 密钥不能为空");
    	if(key.length() % 8 != 0)
    		throw new DesException("对称解密失败： 密钥长度必须是8的倍数");
    	if(vector == null || "".equals(vector))
    		throw new DesException("对称解密失败： 向量不能为空");
    	if(DF_ENCODE == null || "".equals(DF_ENCODE))
    		throw new DesException("对称解密失败： 字符编码不能为空");
        
    	byte[] buf;
		
    	try {
			buf = decoder.decodeBuffer(data);
		    byte[] bt = decrypt(buf,key.getBytes(),vector.getBytes());
			String str = new String(bt,DF_ENCODE); 
			return str;
		} catch (IOException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败： I/O异常");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称解密失败： 未知异常");
		}
    }
 
    /**
     * Description 根据键值、向量进行加密
     * @param data 要加密的数据
     * @param key  加密键byte数组
     * @param vs 向量byte数组
     * @return 加密完的字节数组
     * @throws Exception
     */
    private static byte[] encrypt(byte[] data, byte[] key,byte[] vs) throws DesException{
    	
    	IvParameterSpec iv = new IvParameterSpec(vs);//向量
    	
    	AlgorithmParameterSpec paramSpec = iv;
 
        // 从原始密钥数据创建DESKeySpec对象
        DESKeySpec dks = null;
		try {
			dks = new DESKeySpec(key);
			SecretKey securekey = keyFactory.generateSecret(dks);
			 // Cipher对象实际完成加密操作
	        Cipher cipher = Cipher.getInstance(ALGORITHM_DES);
	        
	        // 用密钥初始化Cipher对象
	        cipher.init(Cipher.ENCRYPT_MODE, securekey, paramSpec);
	        
	        return cipher.doFinal(data);
		} catch (InvalidKeyException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 创建DESKeySpec对象失败");
		} catch (InvalidKeySpecException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 创建SecretKey对象失败");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 不支持的Algorithm");
		} catch (NoSuchPaddingException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： NoSuchPadding");
		} catch (InvalidAlgorithmParameterException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 初始化Cipher失败");
		} catch (IllegalBlockSizeException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 加密失败");
		} catch (BadPaddingException e) {
			e.printStackTrace();
			throw new DesException("对称加密失败： 加密失败");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称加密失败： 未知异常");
		}
    }
     
     
    /**
     * Description 根据键值进行解密
     * @param data
     * @param key  加密键byte数组
     * @param vs 向量byte数组
     * @return 解密完成的byte数组
     * @throws Exception
     */
    private static byte[] decrypt(byte[] data, byte[] key,byte[] vs) throws DesException {
 
       
		try {
			
			IvParameterSpec iv = new IvParameterSpec(vs);//向量
			
			AlgorithmParameterSpec paramSpec = iv;
			// 从原始密钥数据创建DESKeySpec对象
			DESKeySpec dks = new DESKeySpec(key);
			
			SecretKey securekey = keyFactory.generateSecret(dks);
			
			 // Cipher对象实际完成解密操作
	        Cipher cipher = Cipher.getInstance(ALGORITHM_DES);
	 
	        // 用密钥初始化Cipher对象
	        cipher.init(Cipher.DECRYPT_MODE, securekey, paramSpec);
	 
	        return cipher.doFinal(data);
		} catch (InvalidKeyException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败： 初始化DESKeySpec失败");
		} catch (InvalidKeySpecException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败： 获取SecretKey失败");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败：不支持的Algorithm");
		} catch (NoSuchPaddingException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败：NoSuchPadding");
		} catch (InvalidAlgorithmParameterException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败：初始化Cipher失败");
		} catch (IllegalBlockSizeException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败：解密失败");
		} catch (BadPaddingException e) {
			e.printStackTrace();
			throw new DesException("对称解密失败：解密失败");
		}catch(Exception e){
			e.printStackTrace();
			throw new DesException("对称解密失败：未知异常");
		}
    }
    
    public static String encode(String key,byte[] data) throws Exception{
		DESKeySpec dks = new DESKeySpec(key.getBytes());
		SecretKeyFactory keyFactory =
		SecretKeyFactory.getInstance("DES");
		//key的长度不能够小于8位字节
		Key secretKey = keyFactory.generateSecret(dks);
		Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
		IvParameterSpec iv=new IvParameterSpec("12345678".getBytes());//向量
		AlgorithmParameterSpec paramSpec = iv;
		cipher.init(Cipher.ENCRYPT_MODE, secretKey,paramSpec);
		byte[] bytes = cipher.doFinal(data);
		return Base64.encode(bytes);
		}
}