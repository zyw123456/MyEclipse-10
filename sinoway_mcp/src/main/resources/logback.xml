<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<property name="APP_Name" value="sinoway_mcp" />
	<!-- 控制台打印日志方式 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%p] [%thread] %-5level %logger{36}-%msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- info文件日志滚动策略,每天一个日志文件 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>D:/log/${APP_Name}/%d{yyyyMMdd}_info_%i.log</fileNamePattern>
			<maxHistory>30</maxHistory><!-- 保存30天历史日志 -->
			<TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
    			<MaxFileSize>50MB</MaxFileSize>
   			</TimeBasedFileNamingAndTriggeringPolicy>  
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>info</level>
		</filter>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%p] [%thread] %-5level %logger{36}-%msg%n</pattern>
		</encoder>
	<!-- error文件日志滚动策略,每天一个日志文件 -->
	</appender>
		<appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>D:/log/${APP_Name}/%d{yyyyMMdd}_error_%i.log</fileNamePattern>
			<maxHistory>30</maxHistory><!-- 保存30天历史日志 -->
			<TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
    			<MaxFileSize>50MB</MaxFileSize>
   			</TimeBasedFileNamingAndTriggeringPolicy>  
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>ERROR</level>
		</filter>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%p] [%thread] %-5level %logger{36}-%msg%n</pattern>
		</encoder>
	</appender>
	<!-- 异步写日志 -->
	<appender name="CORE_ASYNC_FILE_MODEL" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<appender-ref ref="FILE" />
	</appender>
		<appender name="CORE_ASYNC_ERRORFILE_MODEL" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<appender-ref ref="FILEERROR" />
	</appender>
	<root>
		<level value="INFO" />
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="CORE_ASYNC_FILE_MODEL" />
		<appender-ref ref="CORE_ASYNC_ERRORFILE_MODEL" />
	</root>
	<logger name="com.sinoway" level="INFO" />

<!-- 	<logger name="org.springframework" level="INFO" /> -->
<!-- 	<logger name="org.apache" level="INFO" /> -->
	<!-- <logger name="ch.qos" level="INFO" /> -->

	<!-- MyBatis -->
<!-- 	<logger name="com.ibatis" level="DEBUG" /> -->
<!-- 	<logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG" /> -->
<!-- 	<logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG" /> -->
<!-- 	<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG" /> -->
<!-- 	<logger name="java.sql.Connection" level="DEBUG" /> -->
<!-- 	<logger name="java.sql.Statement" level="DEBUG" /> -->
<!-- 	<logger name="java.sql.PreparedStatement" level="DEBUG" /> -->

</configuration>
